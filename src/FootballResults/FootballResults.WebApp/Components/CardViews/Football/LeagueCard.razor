@if (League != null)
{
    <div class="leagueCard">
        <div class="leagueHeader">
            <a class="leagueDetails"href="/leagues/@League.Name">
                <div class="leagueLogoDiv">
                    <img class="leagueLogo" src="@(League.LogoPath ?? League.LogoLink)" alt="@League.Name logo" />
                </div>
                <div class="leagueName">
                    @League.Name
                </div>
            </a>
            <AuthorizeView>
                <Authorized>
                    <BookmarkIcon Bookmark="League" DefaultColor="defaultLight" ButtonClicked="OnBookmarkClicked" />
                </Authorized>
            </AuthorizeView>
        </div>
        @if (Matches != null)
        {
            switch (MatchOrderOption)
            {
                case MatchOrderOption.DateAsc:
                    @foreach (Match match in Matches.OrderBy(m => m.Date))
                    {
                        <h2>@match.Round</h2>
                        <MatchCard Match="match" />
                    }
                    
                    break;
                case MatchOrderOption.DateDesc:
                    @foreach (Match match in Matches.OrderByDescending(m => m.Date))
                    {
                        <h2>@match.Round</h2>
                        <MatchCard Match="match" />
                    }

                    break;
                case MatchOrderOption.RoundThenDateAsc:
                    var matchesByRound = Matches.GroupBy(m => m.Round)
                        .OrderBy(group => group.Max(match => match.Date))
                        .ThenBy(group => group.Key.Length)
                        .ThenBy(group => group.Key);

                    @foreach (var roundGroup in matchesByRound)
                    {
                        <h2>@roundGroup.Key</h2>
                        @foreach (Match match in roundGroup.OrderBy(m => m.Date))
                        {
                            <MatchCard Match="match" />
                        }
                    }

                    break;

                case MatchOrderOption.RoundThenDateDesc:
                    matchesByRound = Matches.GroupBy(m => m.Round)
                        .OrderByDescending(group => group.Max(match => match.Date))
                        .ThenByDescending(group => group.Key.Length)
                        .ThenByDescending(group => group.Key);

                    @foreach (var roundGroup in matchesByRound)
                    {
                        <h2>@roundGroup.Key</h2>
                        @foreach (Match match in roundGroup.OrderByDescending(m => m.Date))
                        {
                            <MatchCard Match="match" />
                        }
                    }

                    break;
                default:
                    break;
            }
        }
    </div>
}

@code {
        [Parameter]
        public League? League { get; set; }

        [Parameter]
        public IEnumerable<Match>? Matches { get; set; }

        [Parameter]
        public MatchOrderOption MatchOrderOption { get; set; }

        [Parameter]
        public EventCallback BookmarkClicked { get; set; }

        private async Task OnBookmarkClicked()
        {
            await BookmarkClicked.InvokeAsync();
        }
}