@if (League != null)
{
    <div class="leagueCard">
        <div class="leagueHeader">
            <a class="leagueDetails"href="/leagues/@League.Name">
                <div class="leagueLogoDiv">
                    <img class="leagueLogo" src="@League.LogoLink" alt="@League.Name logo" />
                </div>
                <div class="leagueName">
                    @League.Name
                </div>
            </a>
            <BookmarkIcon Bookmark="League" DefaultColor="defaultDark" />
        </div>
        @if (Matches != null)
        {
            switch (MatchOrderOption)
            {
                case MatchOrderOption.DateAsc:
                        @foreach (Match match in Matches.OrderBy(m => m.Date))
                        {
                            <h2>@match.Round</h2>
                            <div class="contentGroup">
                                <MatchCard Match="match" />
                            </div>
                        }
                    
                    break;
                case MatchOrderOption.DateDesc:
                    @foreach (Match match in Matches.OrderByDescending(m => m.Date))
                    {
                        <h2>@match.Round</h2>
                        <div class="contentGroup">
                            <MatchCard Match="match" />
                        </div>
                    }   

                    break;
                case MatchOrderOption.RoundThenDateAsc:
                    var matchesByRound = Matches
                        .GroupBy(
                            m => m.Round,
                            (round, matches) => (round, Matches!.Where(m => m.Round.Equals(round)).OrderBy(m => m.Date).ToList())
                         )
                        .OrderBy(group => group.Item2.Max(m => m.Date))
                        .ThenBy(group => group.round.Length)
                        .ThenBy(group => group.round)
                        .ToList();

                    @foreach (var roundGroup in matchesByRound)
                    {
                        <h2>@roundGroup.Item1</h2>
                        <div class="contentGroup">
                            @foreach (Match match in roundGroup.Item2)
                            {
                                <MatchCard Match="match" />
                            }
                        </div>
                    }

                    break;

                case MatchOrderOption.RoundThenDateDesc:
                    matchesByRound = Matches
                        .GroupBy(
                            m => m.Round,
                            (round, matches) => (round, Matches!.Where(m => m.Round.Equals(round)).OrderByDescending(m => m.Date).ToList())
                        )
                        .OrderByDescending(group => group.Item2.Max(m => m.Date))
                        .ThenBy(group => group.round.Length)
                        .ThenByDescending(group => group.round)
                        .ToList();

                    @foreach (var roundGroup in matchesByRound)
                    {
                        <h2>@roundGroup.Item1</h2>
                        <div class="contentGroup">
                            @foreach (Match match in roundGroup.Item2)
                            {
                                <MatchCard Match="match" />
                            }
                        </div>
                    }

                    break;
                default:
                    break;
            }
        }
    </div>
}

@code {
    [Parameter]
    public League? League { get; set; }

    [Parameter]
    public IEnumerable<Match>? Matches { get; set; }

    [Parameter]
    public MatchOrderOption MatchOrderOption { get; set; }
}