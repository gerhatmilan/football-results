// <auto-generated />
using System;
using FootballResults.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FootballResults.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240908211432_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FlagLink")
                        .HasColumnType("varchar")
                        .HasColumnName("flag_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("country", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.League", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("league_id");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("LogoLink")
                        .HasColumnType("varchar")
                        .HasColumnName("logo_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("type");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("league", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.LeagueSeason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("league_season_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("InProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("in_progress");

                    b.Property<int>("LeagueID")
                        .HasColumnType("int")
                        .HasColumnName("league_id");

                    b.Property<DateTime?>("MatchesLastUpdate")
                        .HasColumnType("timestamp")
                        .HasColumnName("matches_last_update");

                    b.Property<DateTime?>("StandingsLastUpdate")
                        .HasColumnType("timestamp")
                        .HasColumnName("standings_last_update");

                    b.Property<DateTime?>("TopScorersLastUpdate")
                        .HasColumnType("timestamp")
                        .HasColumnName("topscorers_last_update");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("ID");

                    b.HasIndex("LeagueID");

                    b.ToTable("league_season", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.LeagueStanding", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("standing_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Conceded")
                        .HasColumnType("int")
                        .HasColumnName("conceded");

                    b.Property<int>("Draws")
                        .HasColumnType("int")
                        .HasColumnName("draws");

                    b.Property<string>("Group")
                        .HasColumnType("varchar")
                        .HasColumnName("group");

                    b.Property<int>("LeagueSeasonID")
                        .HasColumnType("int")
                        .HasColumnName("league_season_id");

                    b.Property<int>("Losses")
                        .HasColumnType("int")
                        .HasColumnName("losses");

                    b.Property<int>("Played")
                        .HasColumnType("int")
                        .HasColumnName("played");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<int>("Scored")
                        .HasColumnType("int")
                        .HasColumnName("scored");

                    b.Property<int>("TeamID")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("Wins")
                        .HasColumnType("int")
                        .HasColumnName("wins");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.HasIndex("LeagueSeasonID", "Group", "TeamID")
                        .IsUnique();

                    b.ToTable("standing", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Match", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    b.Property<int?>("AwayTeamGoals")
                        .HasColumnType("int")
                        .HasColumnName("away_team_goals");

                    b.Property<int>("AwayTeamID")
                        .HasColumnType("int")
                        .HasColumnName("away_team_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp")
                        .HasColumnName("date");

                    b.Property<int?>("HomeTeamGoals")
                        .HasColumnType("int")
                        .HasColumnName("home_team_goals");

                    b.Property<int>("HomeTeamID")
                        .HasColumnType("int")
                        .HasColumnName("home_team_id");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_update");

                    b.Property<int>("LeagueSeasonID")
                        .HasColumnType("int")
                        .HasColumnName("league_season_id");

                    b.Property<int?>("Minute")
                        .HasColumnType("int")
                        .HasColumnName("minute");

                    b.Property<string>("Round")
                        .HasColumnType("varchar")
                        .HasColumnName("round");

                    b.Property<string>("Status")
                        .HasColumnType("varchar")
                        .HasColumnName("status");

                    b.Property<int?>("VenueID")
                        .HasColumnType("int")
                        .HasColumnName("venue_id");

                    b.HasKey("ID");

                    b.HasIndex("AwayTeamID");

                    b.HasIndex("HomeTeamID");

                    b.HasIndex("LeagueSeasonID");

                    b.HasIndex("VenueID");

                    b.ToTable("match", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("varchar")
                        .HasColumnName("photo_link");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<string>("Position")
                        .HasColumnType("varchar")
                        .HasColumnName("position");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.HasIndex("PlayerID", "TeamID")
                        .IsUnique();

                    b.ToTable("player", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Team", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("CountryID")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("LogoLink")
                        .HasColumnType("varchar")
                        .HasColumnName("logo_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<bool>("National")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("national");

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar")
                        .HasColumnName("short_name");

                    b.Property<DateTime?>("SquadLastUpdate")
                        .HasColumnType("timestamp")
                        .HasColumnName("squad_last_update");

                    b.Property<int?>("VenueID")
                        .HasColumnType("int")
                        .HasColumnName("venue_id");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("VenueID");

                    b.ToTable("team", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.TopScorer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topscorer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("Assists")
                        .HasColumnType("int")
                        .HasColumnName("assists");

                    b.Property<int>("Goals")
                        .HasColumnType("int")
                        .HasColumnName("goals");

                    b.Property<int>("LeagueSeasonID")
                        .HasColumnType("int")
                        .HasColumnName("league_season_id");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("varchar")
                        .HasColumnName("photo_link");

                    b.Property<int?>("Played")
                        .HasColumnType("int")
                        .HasColumnName("played");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("player_name");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<int>("TeamID")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.HasIndex("LeagueSeasonID", "Rank")
                        .IsUnique();

                    b.ToTable("topscorer", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Venue", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("venue_id");

                    b.Property<string>("City")
                        .HasColumnType("varchar")
                        .HasColumnName("city");

                    b.Property<int>("CountryID")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("venue", "football");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.Participation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("participation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("join_date");

                    b.Property<int>("PredictionGameID")
                        .HasColumnType("int")
                        .HasColumnName("prediction_game_id");

                    b.Property<int>("StandingID")
                        .HasColumnType("int")
                        .HasColumnName("standing_id");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("PredictionGameID", "UserID")
                        .IsUnique();

                    b.ToTable("participation", "predictions");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.Prediction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prediction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AwayTeamGoals")
                        .HasColumnType("int")
                        .HasColumnName("away_team_goals");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp")
                        .HasColumnName("prediction_date");

                    b.Property<int>("HomeTeamGoals")
                        .HasColumnType("int")
                        .HasColumnName("home_team_goals");

                    b.Property<int>("MatchID")
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    b.Property<int>("ParticipationID")
                        .HasColumnType("int")
                        .HasColumnName("participation_id");

                    b.Property<bool>("PointsGiven")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("points_given");

                    b.HasKey("ID");

                    b.HasIndex("MatchID");

                    b.HasIndex("ParticipationID", "MatchID")
                        .IsUnique();

                    b.ToTable("prediction", "predictions");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.PredictionGame", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prediction_game_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ExactScorelineReward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10)
                        .HasColumnName("exact_scoreline_reward");

                    b.Property<bool>("Finished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("finished");

                    b.Property<int>("GoalCountReward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5)
                        .HasColumnName("goal_count_reward");

                    b.Property<int>("GoalDifferenceReward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3)
                        .HasColumnName("goal_difference_reward");

                    b.Property<string>("ImagePath")
                        .HasColumnType("varchar")
                        .HasColumnName("image_path");

                    b.Property<string>("JoinKey")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("join_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<int>("OutcomeReward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(8)
                        .HasColumnName("outcome_reward");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<DateTime?>("StandingsLastUpdate")
                        .HasColumnType("timestamp")
                        .HasColumnName("standings_last_update");

                    b.HasKey("ID");

                    b.HasIndex("JoinKey")
                        .IsUnique();

                    b.HasIndex("OwnerID");

                    b.ToTable("prediction_game", "predictions");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.PredictionGameSeason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("predicton_game_season_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("LeagueSeasonID")
                        .HasColumnType("int")
                        .HasColumnName("league_season_id");

                    b.Property<int>("PredictionGameID")
                        .HasColumnType("int")
                        .HasColumnName("prediction_game_id");

                    b.HasKey("ID");

                    b.HasIndex("LeagueSeasonID");

                    b.HasIndex("PredictionGameID", "LeagueSeasonID")
                        .IsUnique();

                    b.ToTable("prediction_game_season", "predictions");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.PredictionGameStanding", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("standing_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ParticipationID")
                        .HasColumnType("int")
                        .HasColumnName("participation_id");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("ID");

                    b.HasIndex("ParticipationID")
                        .IsUnique();

                    b.ToTable("standing", "predictions");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.FavoriteLeague", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorite_league_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("LeagueID")
                        .HasColumnType("int")
                        .HasColumnName("league_id");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("LeagueID");

                    b.HasIndex("UserID", "LeagueID")
                        .IsUnique();

                    b.ToTable("favorite_league", "users");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.FavoriteTeam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorite_team_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("TeamID")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.HasIndex("UserID", "TeamID")
                        .IsUnique();

                    b.ToTable("favorite_team", "users");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("MatchID")
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    b.Property<int?>("PredictionGameID")
                        .HasColumnType("int")
                        .HasColumnName("prediction_game_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("sent_at");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("MatchID");

                    b.HasIndex("PredictionGameID");

                    b.HasIndex("UserID");

                    b.ToTable("message", "users");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("varchar")
                        .HasColumnName("profile_pic_path");

                    b.Property<DateTime?>("RegistrataionDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("registration_date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user", "users");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.League", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Country", "Country")
                        .WithMany("Leagues")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.LeagueSeason", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.League", "League")
                        .WithMany("LeagueSeasons")
                        .HasForeignKey("LeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.LeagueStanding", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.LeagueSeason", "LeagueSeason")
                        .WithMany("Standings")
                        .HasForeignKey("LeagueSeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Football.Team", "Team")
                        .WithMany("Standings")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("LeagueSeason");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Match", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Football.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Football.LeagueSeason", "LeagueSeason")
                        .WithMany("Matches")
                        .HasForeignKey("LeagueSeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Football.Venue", "Venue")
                        .WithMany("Matches")
                        .HasForeignKey("VenueID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("LeagueSeason");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Player", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Team", "Team")
                        .WithMany("Squad")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Team", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Country", "Country")
                        .WithMany("Teams")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Football.Venue", "Venue")
                        .WithMany("Teams")
                        .HasForeignKey("VenueID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.TopScorer", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.LeagueSeason", "LeagueSeason")
                        .WithMany("TopScorers")
                        .HasForeignKey("LeagueSeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Football.Team", "Team")
                        .WithMany("TopScorers")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeagueSeason");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Venue", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Country", "Country")
                        .WithMany("Venues")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.Participation", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Predictions.PredictionGame", "PredictionGame")
                        .WithMany("Participations")
                        .HasForeignKey("PredictionGameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Users.User", "User")
                        .WithMany("Participations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PredictionGame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.Prediction", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Match", "Match")
                        .WithMany("Predictions")
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Predictions.Participation", "Participation")
                        .WithMany("Predictions")
                        .HasForeignKey("ParticipationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.PredictionGame", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Users.User", "Owner")
                        .WithMany("CreatedPredictionGames")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.PredictionGameSeason", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.LeagueSeason", "LeagueSeason")
                        .WithMany("PredictionGameSeasons")
                        .HasForeignKey("LeagueSeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Predictions.PredictionGame", "PredictionGame")
                        .WithMany("PredictionGameSeasons")
                        .HasForeignKey("PredictionGameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeagueSeason");

                    b.Navigation("PredictionGame");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.PredictionGameStanding", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Predictions.Participation", "Participation")
                        .WithOne("Standing")
                        .HasForeignKey("FootballResults.DataAccess.Entities.Predictions.PredictionGameStanding", "ParticipationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.FavoriteLeague", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.League", "League")
                        .WithMany("FavoriteLeagues")
                        .HasForeignKey("LeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Users.User", "User")
                        .WithMany("UserLeagues")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.FavoriteTeam", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Team", "Team")
                        .WithMany("FavoriteTeams")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballResults.DataAccess.Entities.Users.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.Message", b =>
                {
                    b.HasOne("FootballResults.DataAccess.Entities.Football.Match", "Match")
                        .WithMany("Messages")
                        .HasForeignKey("MatchID");

                    b.HasOne("FootballResults.DataAccess.Entities.Predictions.PredictionGame", "PredictionGame")
                        .WithMany("Messages")
                        .HasForeignKey("PredictionGameID");

                    b.HasOne("FootballResults.DataAccess.Entities.Users.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("PredictionGame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Country", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Teams");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.League", b =>
                {
                    b.Navigation("FavoriteLeagues");

                    b.Navigation("LeagueSeasons");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.LeagueSeason", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("PredictionGameSeasons");

                    b.Navigation("Standings");

                    b.Navigation("TopScorers");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Match", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Predictions");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("FavoriteTeams");

                    b.Navigation("HomeMatches");

                    b.Navigation("Squad");

                    b.Navigation("Standings");

                    b.Navigation("TopScorers");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Football.Venue", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.Participation", b =>
                {
                    b.Navigation("Predictions");

                    b.Navigation("Standing");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Predictions.PredictionGame", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participations");

                    b.Navigation("PredictionGameSeasons");
                });

            modelBuilder.Entity("FootballResults.DataAccess.Entities.Users.User", b =>
                {
                    b.Navigation("CreatedPredictionGames");

                    b.Navigation("Messages");

                    b.Navigation("Participations");

                    b.Navigation("UserLeagues");

                    b.Navigation("UserTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
