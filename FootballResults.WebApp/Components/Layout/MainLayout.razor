@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject NavigationManager NavigationManager

<CascadingValue Name="User" Value="User">
    <div class="page"
        <NavMenu />
        <main>
            <article class="content px-4">
                <ErrorBoundary>
                    <ChildContent>
                        @Body
                    </ChildContent>
                    <ErrorContent Context="exception">
                        <h1 class="error">Oops! An error occurred.</h1>
                        <p id="errorMessage" style="text-align: center;">Sorry, an unexpected error has occured.</p>
                        @if (Environment.IsDevelopment())
                        {
                            <p id="errorDetails">@exception.ToString()</p>
                        }
                    </ErrorContent>
                </ErrorBoundary>
            </article>
        </main>
        <Footer />
    </div>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
    </div>
</CascadingValue>

    @code {
    public User? User { get; set; }

    [Parameter]
    public RenderFragment<Exception>? ErrorContent { get; set; }

    [Inject]
    protected IWebHostEnvironment Environment { get; set; }

    protected async override Task OnInitializedAsync()
    {
        // get user from database based on user id claim
        var authenticationState = await AuthenticationStateProvider!.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userID = user.FindFirst("UserID")!.Value;

            int userIDConverted;
            if (int.TryParse(userID, out userIDConverted))
            {
                User = await UserService!.GetUserAsync(userIDConverted);
                if (User == null)
                {
                    NavigationManager.NavigateTo("/logout", true);
                }
            }
        }
    }
}